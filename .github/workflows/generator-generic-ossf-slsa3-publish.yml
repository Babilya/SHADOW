# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you generate SLSA provenance file for your project.
# The generation satisfies level 3 for the provenance requirements - see https://slsa.dev/spec/v0.1/requirements
# The project is an initiative of the OpenSSF (openssf.org) and is developed at
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: SLSA generic generator
on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      digests: ${{ steps.hash.outputs.digests }}

    steps:
      - uses: actions/checkout@v4

      # ========================================================
      #
      # Step 1: Build your artifacts.
      #
      # ========================================================
      - name: Build artifacts
        run: |
            # Эти артефакты — пример; замените на сборку вашего проекта.
            echo "artifact1" > "artifact 1"
            echo "artifact2" > artifact2

      # ========================================================
      #
      # Step 2: Generate subject for provenance
      # Improved: robust handling of filenames with spaces, stable base64 output,
      # and deterministic ordering.
      #
      # ========================================================
      - name: Generate subject for provenance
        id: hash
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          # Ищем артефакты в корне репо (поддерживаем пробелы в именах).
          # Подберите шаблон под ваш проект.
          files=(./artifact* ./\"artifact 1\")
          # Фильтруем реальные файлы, убираем каталоги и leading ./
          real_files=()
          for p in "${files[@]}"; do
            if [ -f "$p" ]; then
              real_files+=("${p#./}")
            fi
          done

          if [ "${#real_files[@]}" -eq 0 ]; then
            echo "digests=" >> "${GITHUB_OUTPUT}"
            exit 0
          fi

          # Сортируем список файлов для детерминированности
          IFS=$'\n' sorted=($(printf "%s\n" "${real_files[@]}" | sort))
          unset IFS

          # Для каждого файла вычисляем sha256, собираем конкатенированную строку hex хэшей.
          hashes=""
          for f in "${sorted[@]}"; do
            h=$(sha256sum "$f" | awk '{print $1}')
            hashes="${hashes}${h}"
          done

          # base64 без переносов, стандартный алфавит
          encoded=$(printf "%s" "$hashes" | base64 | tr -d '\n')
          echo "digests=${encoded}" >> "${GITHUB_OUTPUT}"

  provenance:
    needs: [build]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      base64-subjects: "${{ needs.build.outputs.digests }}"
      upload-assets: true
